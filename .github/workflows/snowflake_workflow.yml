name: Feature Branch Testing (dbt)

on:
  workflow_dispatch:
  push:
    branches:
      - main # ðŸŽ¯ This trigger runs the workflow only on pushes to 'feature1'

jobs:
  test_dbt_models:
    runs-on: ubuntu-latest
    #timeout-minutes: 10 # Fail the job if it runs too long

    steps:
    # 1. Checkout Code
    - name: Checkout repository code
      uses: actions/checkout@v4

    # 2. Setup dbt Core
    # Ensure you are using the correct adapter and version
    - name: Install Python and dbt
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # Use a stable Python version

    - name: Install dbt and adapter
      run: pip install dbt-core==1.10.13 dbt-snowflake # Replace dbt-snowflake with your adapter

    # 3. Configure Credentials (Secrets Injection)
    - name: Set Environment Variables for Testing
      run: |
        # Inject secrets securely from GitHub Secrets
        echo "DBT_USER=${{ secrets.DBT_CI_USER }}" >> $GITHUB_ENV
        echo "DBT_PASSWORD=${{ secrets.DBT_CI_PASSWORD }}" >> $GITHUB_ENV
        # Set a dedicated schema for testing to avoid conflicts
        echo "DBT_TARGET_SCHEMA=dbt_feature1_test" >> $GITHUB_ENV
      
    # 4. Run dbt Commands
    - name: Install dbt packages
      run: dbt deps

    - name: Run Models and Tests
      # We use 'dbt build' to run models, seeds, snapshots, and tests sequentially.
      # The target 'ci' should be defined in your profiles.yml to use the test schema.
      run: dbt build --target ci
      # Alternatively, you could use: dbt run --target ci && dbt test --target ci

    # 5. Optional: Send Notification on Failure
    - name: Notify Team on Failure
      # This step only executes if any preceding step fails
      if: failure()
      run: echo "DBT tests failed on the feature1 branch." # Use a dedicated notification action here (e.g., Slack)
